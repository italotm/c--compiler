/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>C:/Users/Italo/git/c--compiler/src/c.flex</tt>
 */
class LexicalAnalysis implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\103\1\3\1\4\1\3\1\3\22\0\1\103\1\73\1\40"+
    "\2\0\1\70\1\71\1\36\1\101\1\102\1\2\1\33\1\65\1\34"+
    "\1\35\1\1\1\26\11\6\1\66\1\67\1\76\1\75\1\77\1\100"+
    "\1\10\1\15\1\15\1\15\1\16\1\17\1\16\5\5\1\13\1\31"+
    "\7\5\1\11\2\5\1\30\2\5\1\63\1\45\1\64\1\72\1\7"+
    "\1\0\1\20\1\21\1\22\1\23\1\24\1\25\1\54\1\52\1\53"+
    "\1\57\1\50\1\14\1\32\1\41\1\47\1\55\1\5\1\42\1\46"+
    "\1\43\1\12\1\44\1\56\1\27\1\51\1\60\1\61\1\37\1\62"+
    "\1\74\6\0\1\4\u1fa2\0\1\4\1\4\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\0\10\4"+
    "\1\5\1\4\1\6\1\7\1\10\1\0\1\11\1\0"+
    "\12\4\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\0\1\35\1\36\2\5"+
    "\1\37\2\0\1\40\7\4\1\41\11\4\1\42\10\4"+
    "\1\0\2\4\1\43\1\44\1\45\1\46\1\47\1\37"+
    "\2\0\1\50\1\51\1\52\1\0\23\4\1\53\1\4"+
    "\1\54\1\55\6\4\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\0\1\5\1\37"+
    "\1\0\11\4\1\70\26\4\1\71\3\4\1\5\2\4"+
    "\1\72\4\0\2\4\1\73\1\4\1\74\3\4\1\75"+
    "\10\4\1\76\5\4\1\77\4\4\1\100\1\101\6\4"+
    "\1\102\1\103\1\34\1\0\5\4\1\104\1\105\1\106"+
    "\2\4\1\107\1\4\1\110\1\111\2\4\1\112\2\4"+
    "\1\113\5\4\1\114\2\4\1\115\11\4\6\0\1\72"+
    "\1\116\4\4\1\117\1\120\1\4\1\121\1\4\1\122"+
    "\17\4\1\123\6\4\1\124\3\4\1\125\2\4\1\126"+
    "\1\127\1\130\1\4\1\131\7\4\1\132\1\133\1\134"+
    "\1\4\1\135\1\136\3\4\11\0\5\4\1\137\2\4"+
    "\1\140\5\4\1\141\10\4\1\142\3\4\1\143\1\4"+
    "\1\144\1\145\7\4\1\146\1\147\3\4\1\150\1\151"+
    "\14\0\2\4\1\152\1\153\1\154\2\4\1\155\1\4"+
    "\1\156\1\157\1\160\1\161\1\162\1\163\5\4\1\164"+
    "\1\165\7\4\1\166\1\4\1\167\1\170\1\4\1\171"+
    "\1\172\7\0\3\4\1\173\10\4\1\174\1\4\1\175"+
    "\1\176\1\177\1\200\1\201\7\0\1\4\1\202\1\203"+
    "\1\4\1\204\1\205\1\206\1\4\1\207\1\4\1\210"+
    "\1\211\10\0\1\212\1\4\1\213\1\214\7\0\1\215"+
    "\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[509];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c"+
    "\0\u0880\0\314\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\u08c4\0\u0908\0\u094c\0\u0990\0\314\0\u09d4\0\u0a18\0\u0a5c"+
    "\0\314\0\314\0\314\0\u0aa0\0\u0ae4\0\314\0\314\0\u0b28"+
    "\0\u0b6c\0\314\0\u0bb0\0\u050c\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0"+
    "\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0"+
    "\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100"+
    "\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320"+
    "\0\u1364\0\u13a8\0\314\0\314\0\314\0\314\0\314\0\u13ec"+
    "\0\u1430\0\u1474\0\314\0\314\0\314\0\u14b8\0\u14fc\0\u1540"+
    "\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760"+
    "\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980"+
    "\0\u19c4\0\u0110\0\u1a08\0\u1a4c\0\u0110\0\u1a90\0\u1ad4\0\u1b18"+
    "\0\u1b5c\0\u1ba0\0\u1be4\0\314\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\u1c28\0\314\0\u1c6c\0\u1cb0\0\314\0\u1cf4"+
    "\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14"+
    "\0\u1f58\0\u1f9c\0\u0110\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0"+
    "\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310"+
    "\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530"+
    "\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750"+
    "\0\314\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u0110"+
    "\0\u292c\0\u0110\0\u2970\0\u29b4\0\u29f8\0\u0110\0\u2a3c\0\u2a80"+
    "\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u0110\0\u2c5c"+
    "\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u0110\0\u2db0\0\u2df4\0\u2e38"+
    "\0\u2e7c\0\u2ec0\0\u0110\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014"+
    "\0\u3058\0\314\0\314\0\314\0\u309c\0\u30e0\0\u3124\0\u3168"+
    "\0\u31ac\0\u31f0\0\u0110\0\u0110\0\u0110\0\u3234\0\u3278\0\u0110"+
    "\0\u32bc\0\u0110\0\u0110\0\u3300\0\u3344\0\u0110\0\u3388\0\u33cc"+
    "\0\u0110\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520\0\u0110\0\u3564"+
    "\0\u35a8\0\u0110\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740"+
    "\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960"+
    "\0\u39a4\0\u39e8\0\u0110\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u0110"+
    "\0\u3b3c\0\u3b80\0\u0110\0\u3bc4\0\u0110\0\u3c08\0\u3c4c\0\u3c90"+
    "\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0"+
    "\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0\0\u0110\0\u4004\0\u4048\0\u408c"+
    "\0\u40d0\0\u4114\0\u4158\0\u0110\0\u419c\0\u41e0\0\u4224\0\u0110"+
    "\0\u4268\0\u42ac\0\u0110\0\u0110\0\u0110\0\u42f0\0\u0110\0\u4334"+
    "\0\u4378\0\u43bc\0\u4400\0\u4444\0\u4488\0\u44cc\0\u0110\0\u0110"+
    "\0\u0110\0\u4510\0\u0110\0\u0110\0\u4554\0\u4598\0\u45dc\0\u4620"+
    "\0\u4664\0\u46a8\0\u46ec\0\u4730\0\u4774\0\u47b8\0\u47fc\0\u4840"+
    "\0\u4884\0\u48c8\0\u490c\0\u4950\0\u4994\0\u0110\0\u49d8\0\u4a1c"+
    "\0\u0110\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70\0\u0110\0\u4bb4"+
    "\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90\0\u4dd4"+
    "\0\u4e18\0\u4e5c\0\u4ea0\0\u0110\0\u4ee4\0\u0110\0\u0110\0\u4f28"+
    "\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038\0\u507c\0\u50c0\0\u0110\0\u0110"+
    "\0\u5104\0\u5148\0\u518c\0\u0110\0\u0110\0\u51d0\0\u5214\0\u5258"+
    "\0\u529c\0\u52e0\0\u5324\0\u5368\0\u53ac\0\u53f0\0\u5434\0\u5478"+
    "\0\u54bc\0\u5500\0\u5544\0\u0110\0\u0110\0\u0110\0\u5588\0\u55cc"+
    "\0\u0110\0\u5610\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110"+
    "\0\u5654\0\u5698\0\u56dc\0\u5720\0\u5764\0\u0110\0\u0110\0\u57a8"+
    "\0\u57ec\0\u5830\0\u5874\0\u58b8\0\u58fc\0\u5940\0\u0110\0\u5984"+
    "\0\u0110\0\u0110\0\u59c8\0\u0110\0\u0110\0\u5a0c\0\u5a50\0\u5a94"+
    "\0\u5ad8\0\u5b1c\0\u5b60\0\u5ba4\0\u5be8\0\u5c2c\0\u5c70\0\u0110"+
    "\0\u5cb4\0\u5cf8\0\u5d3c\0\u5d80\0\u5dc4\0\u5e08\0\u5e4c\0\u5e90"+
    "\0\u0110\0\u5ed4\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u5f18"+
    "\0\u5f5c\0\u5fa0\0\u5fe4\0\u6028\0\u606c\0\u60b0\0\u60f4\0\u0110"+
    "\0\u0110\0\u6138\0\u0110\0\u0110\0\u0110\0\u617c\0\u0110\0\u61c0"+
    "\0\u0110\0\u0110\0\u6204\0\u6248\0\u628c\0\u62d0\0\u6314\0\u6358"+
    "\0\u639c\0\u63e0\0\u0110\0\u6424\0\u0110\0\u0110\0\u6468\0\u64ac"+
    "\0\u64f0\0\u6534\0\u6578\0\u65bc\0\u6600\0\u0110\0\u6644\0\u6688"+
    "\0\u66cc\0\u6710\0\u6754\0\u6798\0\u67dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[509];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\0\1\5\1\6\1\0"+
    "\1\7\1\5\1\10\1\5\1\11\3\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\3\5\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\0\1\34\1\35\3\5\1\36\1\37\1\40"+
    "\1\41\2\5\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\4\1\0\1\64\1\65"+
    "\72\0\1\66\103\0\1\67\117\0\3\5\1\0\22\5"+
    "\6\0\4\5\1\0\13\5\31\0\1\6\2\0\2\70"+
    "\2\71\1\0\1\72\1\73\3\0\1\72\1\73\1\72"+
    "\1\6\2\0\2\72\2\0\1\74\53\0\1\75\3\0"+
    "\15\75\1\0\4\75\5\0\1\27\4\75\1\0\13\75"+
    "\30\0\3\5\1\0\3\5\1\76\16\5\6\0\1\77"+
    "\3\5\1\0\1\100\4\5\1\101\5\5\30\0\3\5"+
    "\1\0\22\5\6\0\4\5\1\0\1\5\1\102\11\5"+
    "\30\0\3\5\1\0\10\5\1\103\1\5\1\104\7\5"+
    "\6\0\4\5\1\0\1\105\12\5\30\0\3\5\1\0"+
    "\7\5\1\106\12\5\6\0\1\5\1\107\2\5\1\0"+
    "\1\5\1\110\1\5\1\111\7\5\30\0\3\5\1\0"+
    "\3\5\1\112\3\5\1\113\12\5\6\0\4\5\1\0"+
    "\1\5\1\114\2\5\1\115\6\5\30\0\3\5\1\0"+
    "\13\5\1\116\6\5\6\0\4\5\1\0\1\5\1\117"+
    "\11\5\30\0\3\5\1\0\3\5\1\120\12\5\1\121"+
    "\3\5\6\0\1\122\2\5\1\123\1\0\13\5\30\0"+
    "\3\5\1\0\3\5\1\124\3\5\1\125\12\5\6\0"+
    "\4\5\1\0\1\5\1\126\3\5\1\127\5\5\31\0"+
    "\1\6\2\0\2\70\2\71\1\0\1\72\1\73\3\0"+
    "\1\72\1\73\1\72\1\6\2\130\2\72\2\0\1\74"+
    "\53\0\3\5\1\0\13\5\1\131\6\5\6\0\4\5"+
    "\1\0\1\5\1\132\11\5\56\0\1\133\41\0\1\134"+
    "\42\0\1\135\40\0\1\136\1\0\1\137\12\0\1\140"+
    "\17\0\1\140\55\0\36\141\1\0\6\141\1\142\36\141"+
    "\37\0\1\143\35\0\1\144\6\0\40\27\1\145\4\27"+
    "\1\146\36\27\5\0\3\5\1\0\1\5\1\147\5\5"+
    "\1\150\3\5\1\151\6\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\13\5\1\152\6\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\22\5\6\0\1\5"+
    "\1\153\2\5\1\0\3\5\1\154\1\155\6\5\30\0"+
    "\3\5\1\0\22\5\6\0\4\5\1\0\1\5\1\156"+
    "\3\5\1\157\5\5\30\0\3\5\1\0\10\5\1\160"+
    "\2\5\1\161\6\5\6\0\2\5\1\162\1\5\1\0"+
    "\4\5\1\163\1\164\2\5\1\165\2\5\30\0\3\5"+
    "\1\0\1\5\1\166\6\5\1\167\11\5\6\0\3\5"+
    "\1\170\1\0\7\5\1\171\3\5\30\0\3\5\1\0"+
    "\14\5\1\172\4\5\1\173\6\0\1\174\3\5\1\0"+
    "\1\175\12\5\30\0\3\5\1\0\13\5\1\176\6\5"+
    "\6\0\4\5\1\0\1\5\1\177\11\5\30\0\3\5"+
    "\1\0\1\5\1\200\5\5\1\201\12\5\6\0\1\5"+
    "\1\202\2\5\1\0\13\5\30\0\3\5\1\0\22\5"+
    "\6\0\4\5\1\0\4\5\1\203\6\5\120\0\1\204"+
    "\77\0\1\205\3\0\1\206\103\0\1\207\103\0\1\210"+
    "\103\0\1\211\103\0\1\212\1\213\102\0\1\214\1\0"+
    "\1\215\4\0\3\64\2\0\77\64\2\65\1\216\101\65"+
    "\13\0\2\217\100\0\2\217\77\0\1\220\17\0\1\220"+
    "\4\0\2\221\54\0\3\75\1\0\22\75\6\0\4\75"+
    "\1\0\13\75\30\0\3\5\1\0\22\5\6\0\4\5"+
    "\1\0\1\5\1\222\11\5\30\0\3\5\1\0\11\5"+
    "\1\223\10\5\6\0\4\5\1\0\1\224\12\5\30\0"+
    "\3\5\1\0\22\5\6\0\4\5\1\0\4\5\1\225"+
    "\1\226\5\5\30\0\3\5\1\0\22\5\6\0\1\227"+
    "\3\5\1\0\13\5\30\0\3\5\1\0\11\5\1\230"+
    "\10\5\6\0\1\231\3\5\1\0\13\5\30\0\3\5"+
    "\1\0\22\5\6\0\4\5\1\0\1\232\12\5\30\0"+
    "\3\5\1\0\12\5\1\233\7\5\6\0\4\5\1\0"+
    "\13\5\30\0\3\5\1\0\22\5\6\0\4\5\1\0"+
    "\1\234\12\5\30\0\3\5\1\0\22\5\6\0\4\5"+
    "\1\0\1\235\12\5\30\0\3\5\1\0\13\5\1\236"+
    "\6\5\6\0\4\5\1\0\13\5\30\0\3\5\1\0"+
    "\22\5\6\0\4\5\1\0\1\5\1\237\11\5\30\0"+
    "\3\5\1\0\22\5\6\0\2\5\1\240\1\5\1\0"+
    "\13\5\30\0\3\5\1\0\7\5\1\241\12\5\6\0"+
    "\4\5\1\0\13\5\30\0\3\5\1\0\22\5\6\0"+
    "\2\5\1\242\1\5\1\0\1\243\12\5\30\0\3\5"+
    "\1\0\22\5\6\0\1\244\3\5\1\0\13\5\30\0"+
    "\3\5\1\0\7\5\1\245\3\5\1\246\6\5\6\0"+
    "\4\5\1\0\13\5\30\0\3\5\1\0\3\5\1\247"+
    "\5\5\1\250\2\5\1\251\5\5\6\0\4\5\1\0"+
    "\13\5\30\0\3\5\1\0\1\5\1\252\20\5\6\0"+
    "\4\5\1\0\13\5\30\0\3\5\1\0\22\5\6\0"+
    "\4\5\1\0\1\253\12\5\30\0\3\5\1\0\22\5"+
    "\6\0\2\5\1\254\1\5\1\0\7\5\1\255\3\5"+
    "\30\0\3\5\1\0\1\5\1\256\20\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\13\5\1\257\6\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\22\5"+
    "\6\0\4\5\1\0\1\5\1\260\11\5\30\0\3\5"+
    "\1\0\3\5\1\261\16\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\22\5\6\0\1\5\1\262\2\5"+
    "\1\0\13\5\30\0\3\5\1\0\13\5\1\263\2\5"+
    "\1\264\3\5\6\0\1\265\3\5\1\0\13\5\31\0"+
    "\1\266\6\0\12\266\62\0\3\5\1\0\22\5\6\0"+
    "\2\5\1\267\1\5\1\0\13\5\30\0\3\5\1\0"+
    "\12\5\1\270\7\5\6\0\4\5\1\0\13\5\31\0"+
    "\1\140\7\0\1\72\1\73\3\0\1\72\1\73\1\72"+
    "\1\140\2\0\2\72\107\0\1\271\56\0\1\272\1\273"+
    "\5\0\2\141\3\0\2\141\1\274\6\0\1\275\2\0"+
    "\4\141\37\0\3\27\2\0\77\27\5\0\3\5\1\0"+
    "\3\5\1\276\16\5\6\0\4\5\1\0\13\5\30\0"+
    "\3\5\1\0\21\5\1\277\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\22\5\6\0\4\5\1\0\10\5"+
    "\1\300\2\5\30\0\3\5\1\0\7\5\1\301\4\5"+
    "\1\302\4\5\1\303\6\0\2\5\1\304\1\5\1\0"+
    "\13\5\30\0\3\5\1\0\1\5\1\305\20\5\6\0"+
    "\4\5\1\0\3\5\1\306\7\5\30\0\3\5\1\0"+
    "\22\5\6\0\4\5\1\0\7\5\1\307\3\5\30\0"+
    "\3\5\1\0\22\5\6\0\1\5\1\310\2\5\1\0"+
    "\5\5\1\311\5\5\30\0\3\5\1\0\3\5\1\312"+
    "\16\5\6\0\4\5\1\0\5\5\1\313\5\5\30\0"+
    "\3\5\1\0\22\5\6\0\1\5\1\314\2\5\1\0"+
    "\13\5\30\0\3\5\1\0\22\5\6\0\4\5\1\0"+
    "\3\5\1\315\7\5\30\0\3\5\1\0\7\5\1\316"+
    "\12\5\6\0\2\5\1\317\1\5\1\0\13\5\30\0"+
    "\3\5\1\0\7\5\1\320\12\5\6\0\1\5\1\321"+
    "\2\5\1\0\13\5\30\0\3\5\1\0\22\5\6\0"+
    "\4\5\1\0\1\5\1\322\11\5\30\0\3\5\1\0"+
    "\22\5\6\0\4\5\1\0\12\5\1\323\30\0\3\5"+
    "\1\0\22\5\6\0\4\5\1\0\5\5\1\324\5\5"+
    "\30\0\3\5\1\0\22\5\6\0\2\5\1\325\1\5"+
    "\1\0\13\5\30\0\3\5\1\0\22\5\6\0\4\5"+
    "\1\0\11\5\1\326\1\5\30\0\3\5\1\0\13\5"+
    "\1\327\6\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\13\5\1\330\6\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\22\5\6\0\4\5\1\0\7\5"+
    "\1\331\3\5\30\0\3\5\1\0\22\5\6\0\2\5"+
    "\1\332\1\5\1\0\13\5\30\0\3\5\1\0\22\5"+
    "\6\0\2\5\1\333\1\5\1\0\13\5\30\0\3\5"+
    "\1\0\22\5\6\0\2\5\1\334\1\5\1\0\13\5"+
    "\30\0\3\5\1\0\10\5\1\335\11\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\22\5\6\0\1\5"+
    "\1\336\2\5\1\0\13\5\30\0\3\5\1\0\22\5"+
    "\6\0\4\5\1\0\1\5\1\337\3\5\1\340\5\5"+
    "\30\0\3\5\1\0\22\5\6\0\4\5\1\0\5\5"+
    "\1\341\5\5\120\0\1\342\103\0\1\343\6\0\1\65"+
    "\1\344\1\345\101\65\6\0\1\220\7\0\1\72\4\0"+
    "\1\72\1\0\1\72\1\220\2\0\2\72\57\0\1\220"+
    "\17\0\1\220\62\0\3\5\1\0\22\5\6\0\1\346"+
    "\3\5\1\0\13\5\30\0\3\5\1\0\22\5\6\0"+
    "\4\5\1\0\4\5\1\347\6\5\30\0\3\5\1\0"+
    "\7\5\1\350\12\5\6\0\4\5\1\0\13\5\30\0"+
    "\3\5\1\0\22\5\6\0\4\5\1\0\1\5\1\351"+
    "\11\5\30\0\3\5\1\0\22\5\6\0\1\352\3\5"+
    "\1\0\13\5\30\0\3\5\1\0\22\5\6\0\2\5"+
    "\1\353\1\5\1\0\13\5\30\0\3\5\1\0\22\5"+
    "\6\0\4\5\1\0\2\5\1\354\10\5\30\0\3\5"+
    "\1\0\22\5\6\0\4\5\1\0\6\5\1\355\4\5"+
    "\30\0\3\5\1\0\22\5\6\0\2\5\1\356\1\5"+
    "\1\0\13\5\30\0\3\5\1\0\13\5\1\357\6\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\13\5"+
    "\1\360\6\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\7\5\1\361\12\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\3\5\1\362\16\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\13\5\1\363\6\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\22\5"+
    "\6\0\4\5\1\0\1\364\12\5\30\0\3\5\1\0"+
    "\11\5\1\365\10\5\6\0\4\5\1\0\13\5\30\0"+
    "\3\5\1\0\13\5\1\366\6\5\6\0\4\5\1\0"+
    "\13\5\30\0\3\5\1\0\22\5\6\0\2\5\1\367"+
    "\1\5\1\0\1\370\12\5\30\0\3\5\1\0\22\5"+
    "\6\0\1\5\1\371\2\5\1\0\13\5\30\0\3\5"+
    "\1\0\11\5\1\372\10\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\13\5\1\373\6\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\22\5\6\0\4\5"+
    "\1\0\5\5\1\374\5\5\30\0\3\5\1\0\7\5"+
    "\1\375\12\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\10\5\1\376\11\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\13\5\1\377\6\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\13\5\1\u0100\6\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\3\5"+
    "\1\u0101\16\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\21\5\1\u0102\6\0\4\5\1\0\13\5\30\0"+
    "\3\5\1\0\22\5\6\0\1\u0103\3\5\1\0\13\5"+
    "\30\0\3\5\1\0\7\5\1\u0104\12\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\22\5\6\0\4\5"+
    "\1\0\1\u0105\12\5\30\0\3\5\1\0\13\5\1\u0106"+
    "\6\5\6\0\4\5\1\0\13\5\30\0\3\5\1\0"+
    "\3\5\1\u0107\16\5\6\0\4\5\1\0\13\5\30\0"+
    "\3\5\1\0\13\5\1\u0108\6\5\6\0\4\5\1\0"+
    "\13\5\30\0\3\5\1\0\7\5\1\u0109\12\5\6\0"+
    "\4\5\1\0\13\5\31\0\1\266\2\0\2\70\2\71"+
    "\12\266\62\0\3\5\1\0\22\5\6\0\4\5\1\0"+
    "\4\5\1\u010a\6\5\30\0\3\5\1\0\1\5\1\u010b"+
    "\20\5\6\0\4\5\1\0\13\5\31\0\1\u010c\6\0"+
    "\11\u010d\1\u010c\63\0\1\u010e\6\0\11\u010f\1\u010e\63\0"+
    "\1\u0110\6\0\11\u0111\1\u0110\113\0\1\u0112\52\0\3\5"+
    "\1\0\3\5\1\u0113\16\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\13\5\1\u0114\6\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\12\5\1\u0115\7\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\22\5"+
    "\6\0\4\5\1\0\1\5\1\u0116\11\5\30\0\3\5"+
    "\1\0\1\5\1\u0117\20\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\13\5\1\u0118\6\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\13\5\1\u0119\6\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\22\5"+
    "\6\0\4\5\1\0\1\5\1\u011a\11\5\30\0\3\5"+
    "\1\0\22\5\6\0\4\5\1\0\1\u011b\12\5\30\0"+
    "\3\5\1\0\7\5\1\u011c\12\5\6\0\4\5\1\0"+
    "\13\5\30\0\3\5\1\0\12\5\1\u011d\7\5\6\0"+
    "\4\5\1\0\13\5\30\0\3\5\1\0\22\5\6\0"+
    "\2\5\1\u011e\1\5\1\0\13\5\30\0\3\5\1\0"+
    "\22\5\6\0\2\5\1\u011f\1\5\1\0\13\5\30\0"+
    "\3\5\1\0\3\5\1\u0120\16\5\6\0\4\5\1\0"+
    "\13\5\30\0\3\5\1\0\11\5\1\u0121\10\5\6\0"+
    "\2\5\1\u0122\1\5\1\0\13\5\30\0\3\5\1\0"+
    "\1\5\1\u0123\20\5\6\0\4\5\1\0\5\5\1\u0124"+
    "\5\5\30\0\3\5\1\0\22\5\6\0\1\5\1\u0125"+
    "\2\5\1\0\13\5\30\0\3\5\1\0\13\5\1\u0126"+
    "\6\5\6\0\4\5\1\0\13\5\30\0\3\5\1\0"+
    "\22\5\6\0\2\5\1\u0127\1\5\1\0\13\5\30\0"+
    "\3\5\1\0\13\5\1\u0128\6\5\6\0\4\5\1\0"+
    "\13\5\30\0\3\5\1\0\22\5\6\0\1\5\1\u0129"+
    "\2\5\1\0\13\5\30\0\3\5\1\0\22\5\6\0"+
    "\1\5\1\u012a\2\5\1\0\13\5\30\0\3\5\1\0"+
    "\3\5\1\u012b\16\5\6\0\4\5\1\0\13\5\30\0"+
    "\3\5\1\0\13\5\1\u012c\6\5\6\0\4\5\1\0"+
    "\13\5\30\0\3\5\1\0\22\5\6\0\4\5\1\0"+
    "\1\5\1\u012d\11\5\30\0\3\5\1\0\3\5\1\u012e"+
    "\16\5\6\0\4\5\1\0\13\5\30\0\3\5\1\0"+
    "\7\5\1\u012f\12\5\6\0\4\5\1\0\13\5\30\0"+
    "\3\5\1\0\22\5\6\0\2\5\1\u0130\1\5\1\0"+
    "\7\5\1\u0131\3\5\30\0\3\5\1\0\22\5\6\0"+
    "\3\5\1\u0132\1\0\13\5\30\0\3\5\1\0\3\5"+
    "\1\u0133\16\5\6\0\4\5\1\0\13\5\23\0\1\65"+
    "\1\0\1\345\101\65\5\0\3\5\1\0\22\5\6\0"+
    "\4\5\1\0\6\5\1\u0134\4\5\30\0\3\5\1\0"+
    "\13\5\1\u0135\6\5\6\0\4\5\1\0\13\5\30\0"+
    "\3\5\1\0\14\5\1\u0136\5\5\6\0\4\5\1\0"+
    "\13\5\30\0\3\5\1\0\22\5\6\0\1\5\1\u0137"+
    "\2\5\1\0\13\5\30\0\3\5\1\0\22\5\6\0"+
    "\4\5\1\0\6\5\1\u0138\4\5\30\0\3\5\1\0"+
    "\22\5\6\0\1\5\1\u0139\2\5\1\0\13\5\30\0"+
    "\3\5\1\0\21\5\1\u013a\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\22\5\6\0\4\5\1\0\2\5"+
    "\1\u013b\10\5\30\0\3\5\1\0\22\5\6\0\4\5"+
    "\1\0\1\u013c\12\5\30\0\3\5\1\0\22\5\6\0"+
    "\4\5\1\0\4\5\1\u013d\6\5\30\0\3\5\1\0"+
    "\22\5\6\0\4\5\1\0\5\5\1\u013e\5\5\30\0"+
    "\3\5\1\0\22\5\6\0\2\5\1\u013f\1\5\1\0"+
    "\13\5\30\0\3\5\1\0\22\5\6\0\4\5\1\0"+
    "\2\5\1\u0140\10\5\30\0\3\5\1\0\22\5\6\0"+
    "\4\5\1\0\6\5\1\u0141\4\5\30\0\3\5\1\0"+
    "\21\5\1\u0142\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\1\5\1\u0143\20\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\3\5\1\u0144\16\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\22\5\6\0\1\5"+
    "\1\u0145\2\5\1\0\13\5\30\0\3\5\1\0\22\5"+
    "\6\0\4\5\1\0\5\5\1\u0146\5\5\30\0\3\5"+
    "\1\0\22\5\6\0\2\5\1\u0147\1\5\1\0\13\5"+
    "\30\0\3\5\1\0\22\5\6\0\2\5\1\u0148\1\5"+
    "\1\0\13\5\30\0\3\5\1\0\13\5\1\u0149\6\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\7\5"+
    "\1\u014a\12\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\12\5\1\u014b\7\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\12\5\1\u014c\7\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\3\5\1\u014d\16\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\22\5"+
    "\6\0\4\5\1\0\1\5\1\u014e\11\5\30\0\3\5"+
    "\1\0\3\5\1\u014f\16\5\6\0\4\5\1\0\13\5"+
    "\31\0\1\u0150\6\0\11\u0151\1\u0150\63\0\1\u0152\6\0"+
    "\11\u0151\1\u0152\63\0\1\u0153\6\0\11\u0154\1\u0153\63\0"+
    "\1\u0155\6\0\11\u0154\1\u0155\63\0\1\u0110\6\0\11\u0156"+
    "\1\u0110\7\0\1\271\53\0\1\u0157\6\0\11\u0156\1\u0157"+
    "\7\0\1\271\104\0\1\u0158\51\0\3\5\1\0\22\5"+
    "\6\0\4\5\1\0\1\u0159\12\5\30\0\3\5\1\0"+
    "\22\5\6\0\4\5\1\0\1\5\1\u015a\11\5\30\0"+
    "\3\5\1\0\22\5\6\0\3\5\1\u015b\1\0\13\5"+
    "\30\0\3\5\1\0\22\5\6\0\1\5\1\u015c\2\5"+
    "\1\0\13\5\30\0\3\5\1\0\22\5\6\0\4\5"+
    "\1\0\1\5\1\u015d\11\5\30\0\3\5\1\0\22\5"+
    "\6\0\4\5\1\0\10\5\1\u015e\2\5\30\0\3\5"+
    "\1\0\22\5\6\0\2\5\1\u015f\1\5\1\0\13\5"+
    "\30\0\3\5\1\0\1\5\1\u0160\20\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\13\5\1\u0161\6\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\13\5"+
    "\1\u0162\6\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\22\5\6\0\4\5\1\0\2\5\1\u0163\10\5"+
    "\30\0\3\5\1\0\22\5\6\0\4\5\1\0\5\5"+
    "\1\u0164\5\5\30\0\3\5\1\0\11\5\1\u0165\10\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\22\5"+
    "\6\0\1\u0166\3\5\1\0\13\5\30\0\3\5\1\0"+
    "\22\5\6\0\2\5\1\u0167\1\5\1\0\13\5\30\0"+
    "\3\5\1\0\22\5\6\0\4\5\1\0\1\5\1\u0168"+
    "\11\5\30\0\3\5\1\0\11\5\1\u0169\10\5\6\0"+
    "\4\5\1\0\13\5\30\0\3\5\1\0\11\5\1\u016a"+
    "\10\5\6\0\4\5\1\0\13\5\30\0\3\5\1\0"+
    "\22\5\6\0\1\5\1\u016b\2\5\1\0\13\5\30\0"+
    "\3\5\1\0\7\5\1\u016c\12\5\6\0\4\5\1\0"+
    "\13\5\30\0\3\5\1\0\22\5\6\0\4\5\1\0"+
    "\5\5\1\u016d\5\5\30\0\3\5\1\0\22\5\6\0"+
    "\1\5\1\u016e\2\5\1\0\13\5\30\0\3\5\1\0"+
    "\22\5\6\0\4\5\1\0\5\5\1\u016f\5\5\30\0"+
    "\3\5\1\0\21\5\1\u0170\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\13\5\1\u0171\6\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\13\5\1\u0172\6\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\7\5"+
    "\1\u0173\12\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\13\5\1\u0174\6\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\11\5\1\u0175\10\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\13\5\1\u0176\6\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\22\5"+
    "\6\0\2\5\1\u0177\1\5\1\0\13\5\30\0\3\5"+
    "\1\0\7\5\1\u0178\12\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\10\5\1\u0179\11\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\22\5\6\0\1\u017a"+
    "\3\5\1\0\13\5\30\0\3\5\1\0\13\5\1\u017b"+
    "\6\5\6\0\4\5\1\0\13\5\30\0\3\5\1\0"+
    "\7\5\1\u017c\12\5\6\0\4\5\1\0\13\5\30\0"+
    "\3\5\1\0\7\5\1\u017d\12\5\6\0\4\5\1\0"+
    "\13\5\30\0\3\5\1\0\3\5\1\u017e\16\5\6\0"+
    "\4\5\1\0\13\5\30\0\3\5\1\0\13\5\1\u017f"+
    "\6\5\6\0\4\5\1\0\13\5\30\0\3\5\1\0"+
    "\22\5\6\0\1\u0180\3\5\1\0\13\5\30\0\3\5"+
    "\1\0\11\5\1\u0181\10\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\11\5\1\u0182\10\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\3\5\1\u0183\16\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\12\5"+
    "\1\u0184\7\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\13\5\1\u0185\6\5\6\0\4\5\1\0\13\5"+
    "\31\0\1\u0186\6\0\11\u0187\1\u0186\63\0\1\u0188\6\0"+
    "\11\u0189\1\u0188\63\0\1\u018a\6\0\11\u0189\1\u018a\63\0"+
    "\1\u018b\6\0\11\u018c\1\u018b\63\0\1\u018d\6\0\11\u018e"+
    "\1\u018d\63\0\1\u018f\6\0\11\u018e\1\u018f\63\0\1\u0190"+
    "\6\0\11\u0191\1\u0190\7\0\1\271\53\0\1\u0157\6\0"+
    "\11\u0191\1\u0157\7\0\1\271\105\0\1\141\50\0\3\5"+
    "\1\0\22\5\6\0\4\5\1\0\7\5\1\u0192\3\5"+
    "\30\0\3\5\1\0\22\5\6\0\1\u0193\3\5\1\0"+
    "\13\5\30\0\3\5\1\0\13\5\1\u0194\6\5\6\0"+
    "\4\5\1\0\13\5\30\0\3\5\1\0\22\5\6\0"+
    "\1\u0195\3\5\1\0\13\5\30\0\3\5\1\0\14\5"+
    "\1\u0196\5\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\22\5\6\0\4\5\1\0\5\5\1\u0197\5\5"+
    "\30\0\3\5\1\0\7\5\1\u0198\12\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\12\5\1\u0199\7\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\7\5"+
    "\1\u019a\12\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\11\5\1\u019b\10\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\22\5\6\0\2\5\1\u019c\1\5"+
    "\1\0\13\5\30\0\3\5\1\0\22\5\6\0\4\5"+
    "\1\0\6\5\1\u019d\4\5\30\0\3\5\1\0\14\5"+
    "\1\u019e\5\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\22\5\6\0\4\5\1\0\4\5\1\u019f\6\5"+
    "\30\0\3\5\1\0\22\5\6\0\2\5\1\u01a0\1\5"+
    "\1\0\13\5\30\0\3\5\1\0\22\5\6\0\4\5"+
    "\1\0\5\5\1\u01a1\5\5\30\0\3\5\1\0\22\5"+
    "\6\0\2\5\1\u01a2\1\5\1\0\13\5\30\0\3\5"+
    "\1\0\11\5\1\u01a3\10\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\14\5\1\u01a4\5\5\6\0\1\u01a5"+
    "\3\5\1\0\13\5\30\0\3\5\1\0\11\5\1\u01a6"+
    "\10\5\6\0\4\5\1\0\13\5\30\0\3\5\1\0"+
    "\22\5\6\0\4\5\1\0\1\u01a7\12\5\30\0\3\5"+
    "\1\0\11\5\1\u01a8\10\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\22\5\6\0\1\5\1\u01a9\2\5"+
    "\1\0\13\5\30\0\3\5\1\0\22\5\6\0\2\5"+
    "\1\u01aa\1\5\1\0\13\5\30\0\3\5\1\0\22\5"+
    "\6\0\4\5\1\0\2\5\1\u01ab\10\5\30\0\3\5"+
    "\1\0\11\5\1\u01ac\10\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\3\5\1\u01ad\16\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\1\5\1\u01ae\20\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\12\5"+
    "\1\u01af\7\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\22\5\6\0\2\5\1\u01b0\1\5\1\0\13\5"+
    "\30\0\3\5\1\0\3\5\1\u01b1\16\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\22\5\6\0\2\5"+
    "\1\u01b2\1\5\1\0\13\5\30\0\3\5\1\0\22\5"+
    "\6\0\4\5\1\0\5\5\1\u01b3\5\5\30\0\3\5"+
    "\1\0\22\5\6\0\4\5\1\0\4\5\1\u01b4\6\5"+
    "\30\0\3\5\1\0\22\5\6\0\4\5\1\0\3\5"+
    "\1\u01b5\7\5\31\0\1\u01b6\6\0\11\u01b7\1\u01b6\63\0"+
    "\1\u01b8\6\0\11\u01b9\1\u01b8\63\0\1\u01b8\6\0\11\273"+
    "\1\u01b8\63\0\1\u01ba\6\0\11\273\1\u01ba\63\0\1\u01bb"+
    "\6\0\11\u01b9\1\u01bb\63\0\1\u0110\6\0\11\u0156\1\u0110"+
    "\63\0\1\u0190\6\0\11\u0191\1\u0190\63\0\1\u0190\6\0"+
    "\11\141\1\u0190\63\0\1\u01bc\6\0\11\141\1\u01bc\63\0"+
    "\1\u0157\6\0\11\u0191\1\u0157\63\0\1\u0190\6\0\11\141"+
    "\1\u0190\7\0\1\271\53\0\1\u01bc\6\0\11\141\1\u01bc"+
    "\7\0\1\271\52\0\3\5\1\0\7\5\1\u01bd\12\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\3\5"+
    "\1\u01be\16\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\3\5\1\u01bf\16\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\3\5\1\u01c0\16\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\3\5\1\u01c1\16\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\12\5"+
    "\1\u01c2\7\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\22\5\6\0\4\5\1\0\1\5\1\u01c3\11\5"+
    "\30\0\3\5\1\0\22\5\6\0\4\5\1\0\5\5"+
    "\1\u01c4\5\5\30\0\3\5\1\0\7\5\1\u01c5\12\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\7\5"+
    "\1\u01c6\12\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\22\5\6\0\2\5\1\u01c7\1\5\1\0\13\5"+
    "\30\0\3\5\1\0\22\5\6\0\2\5\1\u01c8\1\5"+
    "\1\0\13\5\30\0\3\5\1\0\13\5\1\u01c9\6\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\13\5"+
    "\1\u01ca\6\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\22\5\6\0\2\5\1\u01cb\1\5\1\0\13\5"+
    "\30\0\3\5\1\0\22\5\6\0\4\5\1\0\3\5"+
    "\1\u01cc\7\5\30\0\3\5\1\0\13\5\1\u01cd\6\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\13\5"+
    "\1\u01ce\6\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\22\5\6\0\2\5\1\u01cf\1\5\1\0\13\5"+
    "\31\0\1\u01d0\6\0\11\u01d1\1\u01d0\63\0\1\u01d2\6\0"+
    "\11\u01d3\1\u01d2\63\0\1\u01d2\6\0\11\u01d4\1\u01d2\63\0"+
    "\1\u01d5\6\0\11\u01d4\1\u01d5\63\0\1\u01d5\6\0\11\u010f"+
    "\1\u01d5\63\0\1\u01d6\6\0\11\u01d3\1\u01d6\63\0\1\u01bc"+
    "\17\0\1\u01bc\7\0\1\271\52\0\3\5\1\0\11\5"+
    "\1\u01d7\10\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\22\5\6\0\4\5\1\0\3\5\1\u01d8\7\5"+
    "\30\0\3\5\1\0\13\5\1\u01d9\6\5\6\0\4\5"+
    "\1\0\13\5\30\0\3\5\1\0\3\5\1\u01da\16\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\13\5"+
    "\1\u01db\6\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\22\5\6\0\1\5\1\u01dc\2\5\1\0\13\5"+
    "\30\0\3\5\1\0\22\5\6\0\2\5\1\u01dd\1\5"+
    "\1\0\13\5\30\0\3\5\1\0\11\5\1\u01de\10\5"+
    "\6\0\4\5\1\0\13\5\30\0\3\5\1\0\3\5"+
    "\1\u01df\16\5\6\0\4\5\1\0\13\5\30\0\3\5"+
    "\1\0\13\5\1\u01e0\6\5\6\0\4\5\1\0\13\5"+
    "\30\0\3\5\1\0\22\5\6\0\4\5\1\0\3\5"+
    "\1\u01e1\7\5\30\0\3\5\1\0\12\5\1\u01e2\7\5"+
    "\6\0\4\5\1\0\13\5\31\0\1\u01e3\6\0\11\u01e4"+
    "\1\u01e3\63\0\1\u01e5\6\0\11\u01e6\1\u01e5\63\0\1\u01e5"+
    "\6\0\11\u01e7\1\u01e5\63\0\1\u01e8\6\0\11\u01e7\1\u01e8"+
    "\63\0\1\u0153\6\0\11\u01e9\1\u0153\63\0\1\u01e8\6\0"+
    "\11\u01e9\1\u01e8\63\0\1\u01ea\6\0\11\u01e6\1\u01ea\62\0"+
    "\3\5\1\0\13\5\1\u01eb\6\5\6\0\4\5\1\0"+
    "\13\5\30\0\3\5\1\0\22\5\6\0\4\5\1\0"+
    "\1\5\1\u01ec\11\5\30\0\3\5\1\0\13\5\1\u01ed"+
    "\6\5\6\0\4\5\1\0\13\5\30\0\3\5\1\0"+
    "\12\5\1\u01ee\7\5\6\0\4\5\1\0\13\5\31\0"+
    "\1\u01ef\6\0\11\u01f0\1\u01ef\63\0\1\u01f1\6\0\11\u01f2"+
    "\1\u01f1\63\0\1\u01f1\6\0\11\274\1\u01f1\63\0\1\u01f3"+
    "\6\0\11\274\1\u01f3\63\0\1\u018b\6\0\11\u01f4\1\u018b"+
    "\63\0\1\u01f3\6\0\11\u01f4\1\u01f3\63\0\1\u018f\6\0"+
    "\11\u018c\1\u018f\63\0\1\u01f5\6\0\11\u01f2\1\u01f5\62\0"+
    "\3\5\1\0\11\5\1\u01f6\10\5\6\0\4\5\1\0"+
    "\13\5\31\0\1\u01f7\6\0\11\u01f8\1\u01f7\63\0\1\u01f9"+
    "\6\0\11\u01fa\1\u01f9\63\0\1\u01f9\6\0\11\u01fb\1\u01f9"+
    "\63\0\1\u01fc\6\0\11\u01fb\1\u01fc\63\0\1\u01fc\6\0"+
    "\11\u0111\1\u01fc\63\0\1\u0157\6\0\11\u0156\1\u0157\63\0"+
    "\1\u01fd\6\0\11\u01fa\1\u01fd\63\0\1\u01f7\6\0\11\u01f8"+
    "\1\u01f7\7\0\1\271\53\0\1\u01f9\6\0\11\u01fa\1\u01f9"+
    "\7\0\1\271\53\0\1\u01f9\6\0\11\u01fb\1\u01f9\7\0"+
    "\1\271\53\0\1\u01fc\6\0\11\u01fb\1\u01fc\7\0\1\271"+
    "\53\0\1\u0110\6\0\11\u0111\1\u0110\7\0\1\271\53\0"+
    "\1\u01fc\6\0\11\u0111\1\u01fc\7\0\1\271\53\0\1\u01fd"+
    "\6\0\11\u01fa\1\u01fd\7\0\1\271\45\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26656];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\2\1\1\0\15\1\1\0\1\1"+
    "\1\0\12\1\7\11\4\1\1\11\3\1\3\11\1\1"+
    "\1\0\2\11\2\1\1\11\2\0\33\1\1\0\2\1"+
    "\5\11\1\1\2\0\3\11\1\0\35\1\7\11\1\1"+
    "\1\11\1\1\1\0\1\11\1\1\1\0\47\1\1\11"+
    "\4\0\44\1\3\11\1\0\46\1\6\0\76\1\11\0"+
    "\55\1\14\0\44\1\7\0\23\1\7\0\14\1\10\0"+
    "\4\1\7\0\1\1\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[509];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	   
	   private Symbol symbol(int type) {
		   return new Symbol(type, yyline, yycolumn);
   	   }
   	
 	   private Symbol symbol(int type, Object val) {
		   return new Symbol(type, yyline, yycolumn, val);
   	   }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicalAnalysis(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexicalAnalysis(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return symbol(sym.BARRA);
          }
        case 142: break;
        case 2: 
          { return symbol(sym.ASTERISCO);
          }
        case 143: break;
        case 3: 
          { /*nao faz nada*/
          }
        case 144: break;
        case 4: 
          { return symbol(sym.IDENT, new String(yytext()));
          }
        case 145: break;
        case 5: 
          { return symbol(sym.INTEGERLITERAL, new Integer(yytext()));
          }
        case 146: break;
        case 6: 
          { return symbol(sym.MAIS);
          }
        case 147: break;
        case 7: 
          { return symbol(sym.MENOS);
          }
        case 148: break;
        case 8: 
          { return symbol(sym.PONTO);
          }
        case 149: break;
        case 9: 
          { return symbol(sym.PIPE);
          }
        case 150: break;
        case 10: 
          { return symbol(sym.LCHAVE);
          }
        case 151: break;
        case 11: 
          { return symbol(sym.RCHAVE);
          }
        case 152: break;
        case 12: 
          { return symbol(sym.LCOLCHETE);
          }
        case 153: break;
        case 13: 
          { return symbol(sym.RCOLCHETE);
          }
        case 154: break;
        case 14: 
          { return symbol(sym.VIRGULA);
          }
        case 155: break;
        case 15: 
          { return symbol(sym.DOISPONTOS);
          }
        case 156: break;
        case 16: 
          { return symbol(sym.PONTOEVIRGULA);
          }
        case 157: break;
        case 17: 
          { return symbol(sym.PERCENT);
          }
        case 158: break;
        case 18: 
          { return symbol(sym.ECOMERCIAL);
          }
        case 159: break;
        case 19: 
          { return symbol(sym.CIRCUNFLEXO);
          }
        case 160: break;
        case 20: 
          { return symbol(sym.EXCLAMACAO);
          }
        case 161: break;
        case 21: 
          { return symbol(sym.TIO);
          }
        case 162: break;
        case 22: 
          { return symbol(sym.IGUAL, new Integer(yyline));
          }
        case 163: break;
        case 23: 
          { return symbol(sym.MENOR, new Integer(yyline));
          }
        case 164: break;
        case 24: 
          { return symbol(sym.MAIOR, new Integer(yyline));
          }
        case 165: break;
        case 25: 
          { return symbol(sym.INTERROGACAO);
          }
        case 166: break;
        case 26: 
          { return symbol(sym.LPAREN, new Integer(yyline));
          }
        case 167: break;
        case 27: 
          { return symbol(sym.RPAREN);
          }
        case 168: break;
        case 28: 
          { 
          }
        case 169: break;
        case 29: 
          { return symbol(sym.DIVIDEIGUAL);
          }
        case 170: break;
        case 30: 
          { return symbol(sym.VEZESIGUAL);
          }
        case 171: break;
        case 31: 
          { return symbol(sym.REALLITERAL, new Double(yytext()));
          }
        case 172: break;
        case 32: 
          { return symbol(sym.IDENTARROBA, new String(yytext()));
          }
        case 173: break;
        case 33: 
          { return symbol(sym.AS, new Integer(yyline));
          }
        case 174: break;
        case 34: 
          { return symbol(sym.DO);
          }
        case 175: break;
        case 35: 
          { return symbol(sym.INCREMENTO);
          }
        case 176: break;
        case 36: 
          { return symbol(sym.MAISIGUAL);
          }
        case 177: break;
        case 37: 
          { return symbol(sym.DECREMENTO);
          }
        case 178: break;
        case 38: 
          { return symbol(sym.MENOSIGUAL);
          }
        case 179: break;
        case 39: 
          { return symbol(sym.PONTEIRO);
          }
        case 180: break;
        case 40: 
          { return symbol(sym.ORPIPE);
          }
        case 181: break;
        case 41: 
          { return symbol(sym.PIPEIGUAL);
          }
        case 182: break;
        case 42: 
          { return symbol(sym.STRINGLITERAL);
          }
        case 183: break;
        case 43: 
          { return symbol(sym.IF);
          }
        case 184: break;
        case 44: 
          { return symbol(sym.IN);
          }
        case 185: break;
        case 45: 
          { return symbol(sym.IS, new Integer(yyline));
          }
        case 186: break;
        case 46: 
          { return symbol(sym.PERCENTIGUAL);
          }
        case 187: break;
        case 47: 
          { return symbol(sym.ECOMERCIALDUPLO);
          }
        case 188: break;
        case 48: 
          { return symbol(sym.ECOMERCIALIGUAL);
          }
        case 189: break;
        case 49: 
          { return symbol(sym.TIOIGUAL);
          }
        case 190: break;
        case 50: 
          { return symbol(sym.DIFERENTE, new Integer(yyline));
          }
        case 191: break;
        case 51: 
          { return symbol(sym.IGUALIGUAL, new Integer(yyline));
          }
        case 192: break;
        case 52: 
          { return symbol(sym.MENORIGUAL, new Integer(yyline));
          }
        case 193: break;
        case 53: 
          { return symbol(sym.MENORMENOR);
          }
        case 194: break;
        case 54: 
          { return symbol(sym.MAIORIGUAL, new Integer(yyline));
          }
        case 195: break;
        case 55: 
          { return symbol(sym.MAIORMAIOR);
          }
        case 196: break;
        case 56: 
          { return symbol(sym.ADD);
          }
        case 197: break;
        case 57: 
          { return symbol(sym.FOR, new Integer(yyline));
          }
        case 198: break;
        case 58: 
          { return symbol(sym.CHARLITERAL, new Character(yytext().charAt(1)));
          }
        case 199: break;
        case 59: 
          { return symbol(sym.NEW);
          }
        case 200: break;
        case 60: 
          { return symbol(sym.REF);
          }
        case 201: break;
        case 61: 
          { return symbol(sym.TRY);
          }
        case 202: break;
        case 62: 
          { return symbol(sym.SET);
          }
        case 203: break;
        case 63: 
          { return symbol(sym.OUT);
          }
        case 204: break;
        case 64: 
          { return symbol(sym.INT);
          }
        case 205: break;
        case 65: 
          { return symbol(sym.GET);
          }
        case 206: break;
        case 66: 
          { return symbol(sym.MENORMENORIGUAL);
          }
        case 207: break;
        case 67: 
          { return symbol(sym.MAIORMAIORIGUAL);
          }
        case 208: break;
        case 68: 
          { return symbol(sym.UINT);
          }
        case 209: break;
        case 69: 
          { return symbol(sym.LOCK);
          }
        case 210: break;
        case 70: 
          { return symbol(sym.LONG);
          }
        case 211: break;
        case 71: 
          { return symbol(sym.BASE);
          }
        case 212: break;
        case 72: 
          { return symbol(sym.BOOL);
          }
        case 213: break;
        case 73: 
          { return symbol(sym.BYTE);
          }
        case 214: break;
        case 74: 
          { return symbol(sym.CASE);
          }
        case 215: break;
        case 75: 
          { return symbol(sym.CHAR);
          }
        case 216: break;
        case 76: 
          { return symbol(sym.ELSE);
          }
        case 217: break;
        case 77: 
          { return symbol(sym.ENUM);
          }
        case 218: break;
        case 78: 
          { return symbol(sym.NULL);
          }
        case 219: break;
        case 79: 
          { return symbol(sym.TRUE);
          }
        case 220: break;
        case 80: 
          { return symbol(sym.TYPE);
          }
        case 221: break;
        case 81: 
          { return symbol(sym.THIS);
          }
        case 222: break;
        case 82: 
          { return symbol(sym.VOID);
          }
        case 223: break;
        case 83: 
          { return symbol(sym.GOTO);
          }
        case 224: break;
        case 84: 
          { return symbol(sym.ULONG);
          }
        case 225: break;
        case 85: 
          { return symbol(sym.USING);
          }
        case 226: break;
        case 86: 
          { return symbol(sym.BREAK);
          }
        case 227: break;
        case 87: 
          { return symbol(sym.CLASS);
          }
        case 228: break;
        case 88: 
          { return symbol(sym.CATCH);
          }
        case 229: break;
        case 89: 
          { return symbol(sym.CONST);
          }
        case 230: break;
        case 90: 
          { return symbol(sym.EVENT);
          }
        case 231: break;
        case 91: 
          { return symbol(sym.FLOAT);
          }
        case 232: break;
        case 92: 
          { return symbol(sym.FALSE);
          }
        case 233: break;
        case 93: 
          { return symbol(sym.FIELD);
          }
        case 234: break;
        case 94: 
          { return symbol(sym.FIXED);
          }
        case 235: break;
        case 95: 
          { return symbol(sym.THROW);
          }
        case 236: break;
        case 96: 
          { return symbol(sym.SBYTE);
          }
        case 237: break;
        case 97: 
          { return symbol(sym.SHORT);
          }
        case 238: break;
        case 98: 
          { return symbol(sym.PARAM);
          }
        case 239: break;
        case 99: 
          { return symbol(sym.WHILE);
          }
        case 240: break;
        case 100: 
          { return symbol(sym.UNSAFE);
          }
        case 241: break;
        case 101: 
          { return symbol(sym.USHORT);
          }
        case 242: break;
        case 102: 
          { return symbol(sym.DOUBLE);
          }
        case 243: break;
        case 103: 
          { return symbol(sym.EXTERN);
          }
        case 244: break;
        case 104: 
          { return symbol(sym.METHOD);
          }
        case 245: break;
        case 105: 
          { return symbol(sym.MODULE);
          }
        case 246: break;
        case 106: 
          { return symbol(sym.REMOVE);
          }
        case 247: break;
        case 107: 
          { return symbol(sym.RETURN);
          }
        case 248: break;
        case 108: 
          { return symbol(sym.TYPEOF);
          }
        case 249: break;
        case 109: 
          { return symbol(sym.SEALED);
          }
        case 250: break;
        case 110: 
          { return symbol(sym.STATIC);
          }
        case 251: break;
        case 111: 
          { return symbol(sym.STRUCT);
          }
        case 252: break;
        case 112: 
          { return symbol(sym.STRING);
          }
        case 253: break;
        case 113: 
          { return symbol(sym.SIZEOF);
          }
        case 254: break;
        case 114: 
          { return symbol(sym.SWITCH);
          }
        case 255: break;
        case 115: 
          { return symbol(sym.OBJECT);
          }
        case 256: break;
        case 116: 
          { return symbol(sym.PUBLIC);
          }
        case 257: break;
        case 117: 
          { return symbol(sym.PARAMS);
          }
        case 258: break;
        case 118: 
          { return symbol(sym.CHECKED);
          }
        case 259: break;
        case 119: 
          { return symbol(sym.DECIMAL);
          }
        case 260: break;
        case 120: 
          { return symbol(sym.DEFAULT);
          }
        case 261: break;
        case 121: 
          { return symbol(sym.FOREACH);
          }
        case 262: break;
        case 122: 
          { return symbol(sym.FINALLY);
          }
        case 263: break;
        case 123: 
          { return symbol(sym.VIRTUAL);
          }
        case 264: break;
        case 124: 
          { return symbol(sym.PRIVATE);
          }
        case 265: break;
        case 125: 
          { return symbol(sym.ABSTRACT);
          }
        case 266: break;
        case 126: 
          { return symbol(sym.ASSEMBLY);
          }
        case 267: break;
        case 127: 
          { return symbol(sym.CONTINUE);
          }
        case 268: break;
        case 128: 
          { return symbol(sym.DELEGATE);
          }
        case 269: break;
        case 129: 
          { return symbol(sym.EXPLICIT);
          }
        case 270: break;
        case 130: 
          { return symbol(sym.READONLY);
          }
        case 271: break;
        case 131: 
          { return symbol(sym.VOLATILE);
          }
        case 272: break;
        case 132: 
          { return symbol(sym.OVERRIDE);
          }
        case 273: break;
        case 133: 
          { return symbol(sym.OPERATOR);
          }
        case 274: break;
        case 134: 
          { return symbol(sym.IMPLICIT);
          }
        case 275: break;
        case 135: 
          { return symbol(sym.INTERNAL);
          }
        case 276: break;
        case 136: 
          { return symbol(sym.PROPERTY);
          }
        case 277: break;
        case 137: 
          { return symbol(sym.UNCHECKED);
          }
        case 278: break;
        case 138: 
          { return symbol(sym.NAMESPACE);
          }
        case 279: break;
        case 139: 
          { return symbol(sym.INTERFACE);
          }
        case 280: break;
        case 140: 
          { return symbol(sym.PROTECTED);
          }
        case 281: break;
        case 141: 
          { return symbol(sym.STACKALLOC);
          }
        case 282: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
